name: Test, Build, Tag, and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Required for creating releases and uploading assets
  checks: write
  actions: write
  id-token: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate tag retrieval

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Step 3: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up TipTap registry
        run: |
          echo "@tiptap-pro:registry=https://registry.tiptap.dev/" >> .npmrc
          echo "//registry.tiptap.dev/:_authToken=${{ secrets.TIPTAP_PRO_TOKEN }}" >> .npmrc

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 5: Build the Application (this creates the dist/ folder)
      - name: Build
        run: npm run build

      - name: Bundle dist folder
        run: zip -r dist.zip dist

      # Step 6: Verify dist folder
      - name: Verify dist folder exists
        run: |
          if [ ! -d "dist" ]; then
            echo "dist folder does not exist. Build failed."
            exit 1
          fi

      - name: Set up SSH deploy key
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Configure Git
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote remove origin
          git remote add origin git@github.com:bookcicle/bookcicle_editor.git

      - name: Determine Next Version and Update package.json
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        id: get_version
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          
          if [ -z "$latest_tag" ]; then
            next_version="v1.0.0"
          else
            version=${latest_tag#v}
            IFS='.' read -r -a version_parts <<< "$version"
            major=${version_parts[0]}
            minor=${version_parts[1]}
            patch=${version_parts[2]}
            patch=$((patch + 1))
            next_version="v$major.$minor.$patch"
          fi
          
          echo "Next version: $next_version"
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
          
          # Update package.json with new version
          sed -i 's/"version": ".*"/"version": "'"${next_version#v}"'"/' package.json
          
          # Commit the version bump
          git add package.json
          git commit -m "Bump version to $next_version"


      - name: Create and Push Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git stash  # Stash uncommitted changes
          git pull --rebase origin main  # Pull latest changes
          git stash pop  # Reapply stashed changes
          
          # Create and push the new tag
          git tag ${{ steps.get_version.outputs.next_version }}
          git push origin ${{ steps.get_version.outputs.next_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 10: Create GitHub Release
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.next_version }}
          release_name: Release ${{ steps.get_version.outputs.next_version }}
          body: "Automated release of version ${{ steps.get_version.outputs.next_version }}."
          draft: false
          prerelease: false

      # Step 11: Upload Release Asset
      - name: Upload Release Asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      # Step 12: Clean Up
      - name: Clean Up
        run: rm dist.zip || true

      # Step 13: Publish to npm
      - name: Publish to npm
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          npm config set "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN"
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}