name: Test, Build, Tag, and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  JAVA_HOME: "/home/github-runner/java-21"
  PATH: "/home/github-runner/node/bin:/home/github-runner/java-21/bin:/usr/bin:/usr/local/bin:/usr/bin:/bin"

permissions:
  contents: write  # Required for creating releases and uploading assets
  checks: write
  actions: write

jobs:
  build-and-release:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate tag retrieval

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Specify your Node.js version

      # Step 3: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 5: Run Tests
      - name: Run Tests
        run: npm test

      # Step 6: Build the Application
      - name: Build
        run: npm run build

      # Step 7: Bundle the `dist` folder
      - name: Bundle dist folder
        run: zip -r dist.zip dist

      # Step 8: Determine Next Version
      - name: Determine Next Version
        id: get_version
        run: |
          # Get the latest tag matching the pattern vX.Y.Z
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          
          # Extract the version numbers
          if [ -z "$latest_tag" ]; then
            next_version="v1.0.0"
          else
            # Remove the 'v' prefix
            version=${latest_tag#v}
            IFS='.' read -r -a version_parts <<< "$version"
          
            major=${version_parts[0]}
            minor=${version_parts[1]}
            patch=${version_parts[2]}
          
            # Increment the patch version
            patch=$((patch + 1))
            next_version="v$major.$minor.$patch"
          fi
          
          echo "Next version: $next_version"
          echo "::set-output name=next_version::$next_version"

      # Step 9: Configure Git User
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 10: Create and Push Tag
      - name: Create and Push Tag
        if: success() && steps.get_version.outputs.next_version
        run: |
          git tag ${{ steps.get_version.outputs.next_version }}
          git push origin ${{ steps.get_version.outputs.next_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 11: Create GitHub Release
      - name: Create GitHub Release
        if: success() && steps.get_version.outputs.next_version
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.next_version }}
          release_name: Release ${{ steps.get_version.outputs.next_version }}
          body: "Automated release of version ${{ steps.get_version.outputs.next_version }}."
          draft: false
          prerelease: false

      # Step 12: Upload Release Asset
      - name: Upload Release Asset
        if: success() && steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      # Step 13: Clean Up
      - name: Clean Up
        run: rm dist.zip
